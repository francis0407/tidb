[
  {
    "Name": "TestPKIsHandleRangeScan",
    "Cases": [
      {
        "SQL": "select b from t where a > 1",
        "Plan": [
          "Projection_8 2.00 root  test.t.b",
          "└─TableReader_9 2.00 root  data:TableRangeScan_10",
          "  └─TableRangeScan_10 2.00 cop[tikv] table:t pk col:test.t.a, range:(1,+inf], keep order:false"
        ],
        "Result": [
          "4",
          "6"
        ]
      },
      {
        "SQL": "select b from t where a > 1 and a < 3",
        "Plan": [
          "Projection_8 0.00 root  test.t.b",
          "└─TableReader_9 0.00 root  data:TableRangeScan_10",
          "  └─TableRangeScan_10 0.00 cop[tikv] table:t pk col:test.t.a, range:(1,3), keep order:false"
        ],
        "Result": null
      },
      {
        "SQL": "select b from t where a > 1 and b < 6",
        "Plan": [
          "Projection_8 0.66 root  test.t.b",
          "└─TableReader_9 0.66 root  data:Selection_11",
          "  └─Selection_11 0.66 cop[tikv]  lt(test.t.b, 6)",
          "    └─TableRangeScan_10 2.00 cop[tikv] table:t pk col:test.t.a, range:(1,+inf], keep order:false"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select a from t where a * 3 + 1 > 9 and a < 5",
        "Plan": [
          "TableReader_8 1.60 root  data:Selection_10",
          "└─Selection_10 1.60 cop[tikv]  gt(plus(mul(test.t.a, 3), 1), 9)",
          "  └─TableRangeScan_9 2.00 cop[tikv] table:t pk col:test.t.a, range:[-inf,5), keep order:false"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "SQL": "select a from t group by a having sum(b) > 4",
        "Plan": [
          "Projection_14 2.40 root  test.t.a",
          "└─TableReader_15 2.40 root  data:Selection_17",
          "  └─Selection_17 2.40 cop[tikv]  gt(cast(test.t.b), 4)",
          "    └─TableFullScan_16 3.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "5"
        ]
      }
    ]
  },
  {
    "Name": "TestSort",
    "Cases": [
      {
        "SQL": "select a from t order by a",
        "Plan": [
          "TableReader_7 4.00 root  data:TableFullScan_8",
          "└─TableFullScan_8 4.00 cop[tikv] table:t pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4"
        ]
      },
      {
        "SQL": "select b from t order by b",
        "Plan": [
          "Sort_11 4.00 root  test.t.b:asc",
          "└─TableReader_9 4.00 root  data:TableFullScan_10",
          "  └─TableFullScan_10 4.00 cop[tikv] table:t keep order:false"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "SQL": "select b from t order by a+b",
        "Plan": [
          "Projection_7 4.00 root  test.t.b",
          "└─Projection_12 4.00 root  test.t.b, test.t.a",
          "  └─Sort_8 4.00 root  Column#4:asc",
          "    └─Projection_13 4.00 root  test.t.b, test.t.a, plus(test.t.a, test.t.b)->Column#4",
          "      └─Projection_9 4.00 root  test.t.b, test.t.a",
          "        └─TableReader_10 4.00 root  data:TableFullScan_11",
          "          └─TableFullScan_11 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "SQL": "select b from t order by b, a+b, a",
        "Plan": [
          "Projection_7 4.00 root  test.t.b",
          "└─Projection_12 4.00 root  test.t.b, test.t.a",
          "  └─Sort_8 4.00 root  test.t.b:asc, Column#4:asc, test.t.a:asc",
          "    └─Projection_13 4.00 root  test.t.b, test.t.a, plus(test.t.a, test.t.b)->Column#4",
          "      └─Projection_9 4.00 root  test.t.b, test.t.a",
          "        └─TableReader_10 4.00 root  data:TableFullScan_11",
          "          └─TableFullScan_11 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      }
    ]
  },
  {
    "Name": "TestAggregation",
    "Cases": [
      {
        "SQL": "select sum(a) from t",
        "Plan": [
          "StreamAgg_19 1.00 root  funcs:sum(Column#4)->Column#3",
          "└─TableReader_20 1.00 root  data:StreamAgg_22",
          "  └─StreamAgg_22 1.00 cop[tikv]  funcs:sum(test.t.a)->Column#4",
          "    └─TableFullScan_17 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "10"
        ]
      },
      {
        "SQL": "select max(a), min(b) from t",
        "Plan": [
          "StreamAgg_15 1.00 root  funcs:max(Column#5)->Column#3, funcs:min(Column#6)->Column#4",
          "└─TableReader_16 1.00 root  data:StreamAgg_18",
          "  └─StreamAgg_18 1.00 cop[tikv]  funcs:max(test.t.a)->Column#5, funcs:min(test.t.b)->Column#6",
          "    └─TableFullScan_13 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "4 11"
        ]
      },
      {
        "SQL": "select b, avg(a) from t group by b order by b",
        "Plan": [
          "Projection_12 4.00 root  test.t.b, Column#3",
          "└─Sort_21 4.00 root  test.t.b:asc",
          "  └─HashAgg_14 4.00 root  group by:test.t.b, funcs:avg(Column#7)->Column#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─Projection_15 4.00 root  cast(test.t.a, decimal(65,4) BINARY)->Column#7, test.t.b, test.t.b",
          "      └─TableReader_16 4.00 root  data:TableFullScan_17",
          "        └─TableFullScan_17 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "11 1.0000",
          "22 2.0000",
          "33 3.0000",
          "44 4.0000"
        ]
      },
      {
        "SQL": "select b, sum(a) from t group by b order by b",
        "Plan": [
          "Projection_12 4.00 root  test.t.b, Column#3",
          "└─Sort_21 4.00 root  test.t.b:asc",
          "  └─HashAgg_14 4.00 root  group by:test.t.b, funcs:sum(Column#6)->Column#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─Projection_15 4.00 root  cast(test.t.a, decimal(65,0) BINARY)->Column#6, test.t.b, test.t.b",
          "      └─TableReader_16 4.00 root  data:TableFullScan_17",
          "        └─TableFullScan_17 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "11 1",
          "22 2",
          "33 3",
          "44 4"
        ]
      },
      {
        "SQL": "select b, avg(a) from t group by b having sum(a) > 1 order by b",
        "Plan": [
          "Projection_14 3.20 root  test.t.b, Column#3",
          "└─Projection_16 3.20 root  test.t.b, Column#3, Column#4",
          "  └─Sort_29 3.20 root  test.t.b:asc",
          "    └─Selection_28 3.20 root  gt(Column#4, 1)",
          "      └─HashAgg_19 4.00 root  group by:test.t.b, funcs:avg(Column#11)->Column#3, funcs:sum(Column#12)->Column#4, funcs:firstrow(test.t.b)->test.t.b",
          "        └─Projection_20 4.00 root  cast(test.t.a, decimal(65,4) BINARY)->Column#11, cast(test.t.a, decimal(65,0) BINARY)->Column#12, test.t.b, test.t.b",
          "          └─TableReader_21 4.00 root  data:TableFullScan_22",
          "            └─TableFullScan_22 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "22 2.0000",
          "33 3.0000",
          "44 4.0000"
        ]
      },
      {
        "SQL": "select max(a+b) from t",
        "Plan": [
          "StreamAgg_43 1.00 root  funcs:max(Column#4)->Column#3",
          "└─TableReader_44 1.00 root  data:StreamAgg_46",
          "  └─StreamAgg_46 1.00 cop[tikv]  funcs:max(plus(test.t.a, test.t.b))->Column#4",
          "    └─TableFullScan_30 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "48"
        ]
      },
      {
        "SQL": "select sum(a) from t group by a, a+b order by a",
        "Plan": [
          "Projection_10 4.00 root  Column#3",
          "└─Projection_12 4.00 root  cast(test.t.a, decimal(65,0) BINARY)->Column#3, test.t.a",
          "  └─TableReader_13 4.00 root  data:TableFullScan_14",
          "    └─TableFullScan_14 4.00 cop[tikv] table:t pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4"
        ]
      },
      {
        "SQL": "select b, sum(a) from t group by b having b > 1 order by b",
        "Plan": [
          "Projection_17 1.33 root  test.t.b, Column#3",
          "└─Sort_27 1.33 root  test.t.b:asc",
          "  └─HashAgg_19 1.33 root  group by:test.t.b, funcs:sum(Column#6)->Column#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─Projection_20 1.33 root  cast(test.t.a, decimal(65,0) BINARY)->Column#6, test.t.b, test.t.b",
          "      └─TableReader_21 1.33 root  data:Selection_23",
          "        └─Selection_23 1.33 cop[tikv]  gt(test.t.b, 1)",
          "          └─TableFullScan_22 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "11 1",
          "22 2",
          "33 3",
          "44 4"
        ]
      },
      {
        "SQL": "select c, sum(a) from (select a+b as c, a from t) t1 group by c having c > 1 order by c",
        "Plan": [
          "Projection_24 3.20 root  Column#3, Column#4",
          "└─Sort_36 3.20 root  Column#3:asc",
          "  └─HashAgg_26 3.20 root  group by:Column#3, funcs:sum(Column#10)->Column#4, funcs:firstrow(Column#3)->Column#3",
          "    └─Projection_27 3.20 root  cast(test.t.a, decimal(65,0) BINARY)->Column#10, plus(test.t.a, test.t.b)->Column#3, plus(test.t.a, test.t.b)->Column#3",
          "      └─TableReader_28 3.20 root  data:Selection_30",
          "        └─Selection_30 3.20 cop[tikv]  gt(plus(test.t.a, test.t.b), 1)",
          "          └─TableFullScan_29 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "12 1",
          "24 2",
          "36 3",
          "48 4"
        ]
      },
      {
        "SQL": "select max(a.a) from t a left join t b on a.a = b.a",
        "Plan": [
          "StreamAgg_120 1.00 root  funcs:max(test.t.a)->Column#5",
          "└─Limit_122 1.00 root  offset:0, count:1",
          "  └─TableReader_126 1.00 root  data:Limit_127",
          "    └─Limit_127 1.00 cop[tikv]  offset:0, count:1",
          "      └─TableFullScan_44 1.00 cop[tikv] table:a pk col:test.t.a, keep order:true, desc"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select avg(a.b) from t a left join t b on a.a = b.a",
        "Plan": [
          "StreamAgg_21 1.00 root  funcs:avg(Column#6, Column#7)->Column#5",
          "└─TableReader_22 1.00 root  data:StreamAgg_24",
          "  └─StreamAgg_24 1.00 cop[tikv]  funcs:avg(test.t.b)->Column#6",
          "    └─TableFullScan_19 4.00 cop[tikv] table:a pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "27.5000"
        ]
      },
      {
        "SQL": "select t1.a, max(t1.b) from t as t1 left join (select * from t) as t2 on t1.a = t2.a and t1.b = 3 group by t1.a order by a",
        "Plan": [
          "Projection_14 4.00 root  test.t.a, cast(test.t.b, int(11))->Column#5",
          "└─TableReader_15 4.00 root  data:TableFullScan_16",
          "  └─TableFullScan_16 4.00 cop[tikv] table:t1 pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select t1.a, sum(distinct t1.b) from t as t1 left join (select * from t) as t2 on t1.b = t2.b group by t1.a order by a",
        "Plan": [
          "Projection_13 4.00 root  test.t.a, cast(test.t.b, decimal(65,0) BINARY)->Column#5",
          "└─TableReader_14 4.00 root  data:TableFullScan_15",
          "  └─TableFullScan_15 4.00 cop[tikv] table:t1 pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select t2.a, max(t2.b) from t as t1 right join (select * from t) as t2 on t1.a = t2.a group by t2.a order by a",
        "Plan": [
          "Projection_14 4.00 root  test.t.a, cast(test.t.b, int(11))->Column#5",
          "└─TableReader_15 4.00 root  data:TableFullScan_16",
          "  └─TableFullScan_16 4.00 cop[tikv] table:t pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select t3.a, max(t3.b) from (select t1.a, t1.b from t as t1 left join t as t2 on t1.b = t2.b) t3 group by t3.a order by a",
        "Plan": [
          "Projection_13 4.00 root  test.t.a, cast(test.t.b, int(11))->Column#5",
          "└─TableReader_14 4.00 root  data:TableFullScan_15",
          "  └─TableFullScan_15 4.00 cop[tikv] table:t1 pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select max(a) from t",
        "Plan": [
          "StreamAgg_23 1.00 root  funcs:max(test.t.a)->Column#3",
          "└─Limit_25 1.00 root  offset:0, count:1",
          "  └─TableReader_30 1.00 root  data:Limit_31",
          "    └─Limit_31 1.00 cop[tikv]  offset:0, count:1",
          "      └─TableFullScan_29 1.00 cop[tikv] table:t pk col:test.t.a, keep order:true, desc"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select sum(case when a > 0 and a <= 1000 then b else 0 end) from t",
        "Plan": [
          "StreamAgg_23 1.00 root  funcs:sum(Column#4)->Column#3",
          "└─TableReader_24 1.00 root  data:StreamAgg_26",
          "  └─StreamAgg_26 1.00 cop[tikv]  funcs:sum(test.t.b)->Column#4",
          "    └─TableRangeScan_21 4.00 cop[tikv] table:t pk col:test.t.a, range:(0,1000], keep order:false"
        ],
        "Result": [
          "110"
        ]
      },
      {
        "SQL": "select sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end) from t",
        "Plan": [
          "StreamAgg_26 1.00 root  funcs:sum(Column#4)->Column#3",
          "└─TableReader_27 1.00 root  data:StreamAgg_29",
          "  └─StreamAgg_29 1.00 cop[tikv]  funcs:sum(test.t.b)->Column#4",
          "    └─TableRangeScan_24 4.00 cop[tikv] table:t pk col:test.t.a, range:(0,1000], keep order:false"
        ],
        "Result": [
          "110"
        ]
      },
      {
        "SQL": "select sum(case when a <= 0 or a > 1000 then 0.0 else b end) from t",
        "Plan": [
          "StreamAgg_23 1.00 root  funcs:sum(Column#4)->Column#3",
          "└─TableReader_24 1.00 root  data:StreamAgg_26",
          "  └─StreamAgg_26 1.00 cop[tikv]  funcs:sum(cast(test.t.b))->Column#4",
          "    └─TableRangeScan_21 4.00 cop[tikv] table:t pk col:test.t.a, range:(0,1000], keep order:false"
        ],
        "Result": [
          "110.0"
        ]
      },
      {
        "SQL": "select count(case when a > 0 and a <= 1000 then b end) from t",
        "Plan": [
          "StreamAgg_19 1.00 root  funcs:count(Column#4)->Column#3",
          "└─TableReader_20 1.00 root  data:StreamAgg_22",
          "  └─StreamAgg_22 1.00 cop[tikv]  funcs:count(test.t.b)->Column#4",
          "    └─TableRangeScan_17 4.00 cop[tikv] table:t pk col:test.t.a, range:(0,1000], keep order:false"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select count(case when a <= 0 or a > 1000 then null else b end) from t",
        "Plan": [
          "StreamAgg_19 1.00 root  funcs:count(Column#4)->Column#3",
          "└─TableReader_20 1.00 root  data:StreamAgg_22",
          "  └─StreamAgg_22 1.00 cop[tikv]  funcs:count(test.t.b)->Column#4",
          "    └─TableRangeScan_17 4.00 cop[tikv] table:t pk col:test.t.a, range:(0,1000], keep order:false"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select count(distinct case when a > 0 and a <= 1000 then b end) from t",
        "Plan": [
          "StreamAgg_11 1.00 root  funcs:count(distinct test.t.b)->Column#3",
          "└─TableReader_14 4.00 root  data:TableRangeScan_15",
          "  └─TableRangeScan_15 4.00 cop[tikv] table:t pk col:test.t.a, range:(0,1000], keep order:false"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select count(b), sum(b), avg(b), b, max(b), min(b), bit_and(b), bit_or(b), bit_xor(b) from t group by a having sum(b) >= 0 and count(b) >= 0 order by b",
        "Plan": [
          "Projection_14 3.20 root  Column#3, Column#4, Column#5, test.t.b, Column#6, Column#7, Column#8, Column#9, Column#10",
          "└─Projection_16 3.20 root  if(isnull(test.t.b), 0, 1)->Column#3, cast(test.t.b, decimal(65,0) BINARY)->Column#4, cast(test.t.b, decimal(65,4) BINARY)->Column#5, test.t.b, cast(test.t.b, int(11))->Column#6, cast(test.t.b, int(11))->Column#7, ifnull(cast(test.t.b, bigint(21) UNSIGNED BINARY), 18446744073709551615)->Column#8, ifnull(cast(test.t.b, bigint(21) UNSIGNED BINARY), 0)->Column#9, ifnull(cast(test.t.b, bigint(21) UNSIGNED BINARY), 0)->Column#10, cast(test.t.b, decimal(65,0) BINARY)->Column#4, if(isnull(test.t.b), 0, 1)->Column#3",
          "  └─Sort_22 3.20 root  test.t.b:asc",
          "    └─TableReader_19 3.20 root  data:Selection_21",
          "      └─Selection_21 3.20 cop[tikv]  ge(cast(test.t.b), 0), ge(if(isnull(test.t.b), 0, 1), 0)",
          "        └─TableFullScan_20 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "1 11 11.0000 11 11 11 11 11 11",
          "1 22 22.0000 22 22 22 22 22 22",
          "1 33 33.0000 33 33 33 33 33 33",
          "1 44 44.0000 44 44 44 44 44 44"
        ]
      },
      {
        "SQL": "select group_concat(a, b), min(b), avg(a / b), a from t group by (a+b), a order by a",
        "Plan": [
          "Sort_15 4.00 root  test.t.a:asc",
          "└─HashAgg_11 4.00 root  group by:Column#9, test.t.a, funcs:group_concat(Column#6, Column#7, \",\")->Column#3, funcs:min(test.t.b)->Column#4, funcs:avg(Column#8)->Column#5, funcs:firstrow(test.t.a)->test.t.a",
          "  └─Projection_12 4.00 root  cast(test.t.a, var_string(20))->Column#6, cast(test.t.b, var_string(20))->Column#7, test.t.b, div(cast(test.t.a, decimal(20,0) BINARY), cast(test.t.b, decimal(20,0) BINARY))->Column#8, test.t.a, plus(test.t.a, test.t.b)->Column#9, test.t.a",
          "    └─TableReader_13 4.00 root  data:TableFullScan_14",
          "      └─TableFullScan_14 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "111 11 0.09090909 1",
          "222 22 0.09090909 2",
          "333 33 0.09090909 3",
          "444 44 0.09090909 4"
        ]
      }
    ]
  },
  {
    "Name": "TestPushdownDistinctEnable",
    "Cases": [
      {
        "SQL": "select /*+ HASH_AGG() */ avg(distinct a) from t;",
        "Plan": [
          "StreamAgg_23 1.00 root  funcs:avg(distinct Column#8)->Column#5",
          "└─Projection_29 8000.00 root  cast(test.t.a, decimal(65,4) BINARY)->Column#8",
          "  └─TableReader_30 8000.00 root  data:HashAgg_31",
          "    └─HashAgg_31 8000.00 cop[tikv]  group by:test.t.a, ",
          "      └─TableFullScan_17 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.5000"
        ]
      },
      {
        "SQL": "select /*+ HASH_AGG() */ a, count(distinct a) from t;",
        "Plan": [
          "Projection_8 1.00 root  test.t.a, Column#5",
          "└─StreamAgg_19 1.00 root  funcs:count(distinct test.t.a)->Column#5, funcs:firstrow(Column#7)->test.t.a",
          "  └─TableReader_24 8000.00 root  data:HashAgg_25",
          "    └─HashAgg_25 8000.00 cop[tikv]  group by:test.t.a, funcs:firstrow(test.t.a)->Column#7",
          "      └─TableFullScan_13 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 2"
        ]
      },
      {
        "SQL": "select /*+ HASH_AGG() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;",
        "Plan": [
          "Projection_13 8000.00 root  Column#5, test.t.c, Column#5, Column#6, Column#7, Column#8, Column#9",
          "└─HashAgg_28 8000.00 root  group by:test.t.c, funcs:avg(Column#11, Column#12)->Column#5, funcs:count(distinct test.t.a, test.t.b)->Column#6, funcs:count(distinct test.t.a)->Column#7, funcs:count(distinct test.t.c)->Column#8, funcs:sum(Column#13)->Column#9, funcs:firstrow(test.t.c)->test.t.c",
          "  └─TableReader_30 8000.00 root  data:HashAgg_31",
          "    └─HashAgg_31 8000.00 cop[tikv]  group by:test.t.a, test.t.b, test.t.c, funcs:avg(test.t.b)->Column#11, funcs:sum(test.t.b)->Column#12",
          "      └─TableFullScan_18 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.0000 1 1.0000 1 1 1 1",
          "1.3333 3 1.3333 3 2 1 4",
          "2.0000 <nil> 2.0000 1 1 0 2"
        ]
      },
      {
        "SQL": "select /*+ STREAM_AGG() */ count(distinct c) from t group by c;",
        "Plan": [
          "StreamAgg_21 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_22 8000.00 root  index:StreamAgg_23",
          "  └─StreamAgg_23 8000.00 cop[tikv]  group by:test.t.c, ",
          "    └─IndexFullScan_15 10000.00 cop[tikv] table:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "SQL": "select /*+ STREAM_AGG() */ count(distinct c) from t;",
        "Plan": [
          "StreamAgg_17 1.00 root  funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_18 8000.00 root  index:StreamAgg_19",
          "  └─StreamAgg_19 8000.00 cop[tikv]  group by:test.t.c, ",
          "    └─IndexFullScan_20 10000.00 cop[tikv] table:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "SQL": "select /*+ HASH_AGG() */ count(distinct c) from t;",
        "Plan": [
          "StreamAgg_28 1.00 root  funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_36 8000.00 root  index:HashAgg_37",
          "  └─HashAgg_37 8000.00 cop[tikv]  group by:test.t.c, ",
          "    └─IndexFullScan_18 10000.00 cop[tikv] table:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "SQL": "select count(distinct c) from t group by c;",
        "Plan": [
          "StreamAgg_23 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_27 8000.00 root  index:StreamAgg_28",
          "  └─StreamAgg_28 8000.00 cop[tikv]  group by:test.t.c, ",
          "    └─IndexFullScan_20 10000.00 cop[tikv] table:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "SQL": "select count(distinct c) from t;",
        "Plan": [
          "StreamAgg_23 1.00 root  funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_28 8000.00 root  index:HashAgg_29",
          "  └─HashAgg_29 8000.00 cop[tikv]  group by:test.t.c, ",
          "    └─IndexFullScan_17 10000.00 cop[tikv] table:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      }
    ]
  },
  {
    "Name": "TestPushdownDistinctDisable",
    "Cases": [
      {
        "SQL": "select /*+ HASH_AGG(), AGG_TO_COP() */ avg(distinct a) from t;",
        "Plan": [
          "StreamAgg_9 1.00 root  funcs:avg(distinct Column#7)->Column#5",
          "└─Projection_14 10000.00 root  cast(test.t.a, decimal(65,4) BINARY)->Column#7",
          "  └─TableReader_15 10000.00 root  data:TableFullScan_16",
          "    └─TableFullScan_16 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.5000"
        ]
      },
      {
        "SQL": "select /*+ HASH_AGG(), AGG_TO_COP() */ a, count(distinct a) from t;",
        "Plan": [
          "Projection_6 1.00 root  test.t.a, Column#5",
          "└─StreamAgg_8 1.00 root  funcs:count(distinct test.t.a)->Column#5, funcs:firstrow(test.t.a)->test.t.a",
          "  └─TableReader_12 10000.00 root  data:TableFullScan_13",
          "    └─TableFullScan_13 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 2"
        ]
      },
      {
        "SQL": "select /*+ HASH_AGG(), AGG_TO_COP() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;",
        "Plan": [
          "Projection_11 8000.00 root  Column#5, test.t.c, Column#5, Column#6, Column#7, Column#8, Column#9",
          "└─HashAgg_12 8000.00 root  group by:test.t.c, funcs:avg(Column#11)->Column#5, funcs:count(distinct test.t.a, test.t.b)->Column#6, funcs:count(distinct test.t.a)->Column#7, funcs:count(distinct test.t.c)->Column#8, funcs:sum(Column#12)->Column#9, funcs:firstrow(test.t.c)->test.t.c",
          "  └─Projection_14 10000.00 root  cast(test.t.b, decimal(65,4) BINARY)->Column#11, test.t.a, test.t.b, test.t.a, test.t.c, cast(test.t.b, decimal(65,0) BINARY)->Column#12, test.t.c, test.t.c",
          "    └─TableReader_15 10000.00 root  data:TableFullScan_16",
          "      └─TableFullScan_16 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.0000 1 1.0000 1 1 1 1",
          "1.3333 3 1.3333 3 2 1 4",
          "2.0000 <nil> 2.0000 1 1 0 2"
        ]
      },
      {
        "SQL": "select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t group by c;",
        "Plan": [
          "StreamAgg_8 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_10 10000.00 root  index:IndexFullScan_11",
          "  └─IndexFullScan_11 10000.00 cop[tikv] table:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "SQL": "select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t;",
        "Plan": [
          "StreamAgg_8 1.00 root  funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_11 10000.00 root  index:IndexFullScan_12",
          "  └─IndexFullScan_12 10000.00 cop[tikv] table:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "SQL": "select /*+ HASH_AGG(), AGG_TO_COP() */ count(distinct c) from t;",
        "Plan": [
          "StreamAgg_9 1.00 root  funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_17 10000.00 root  index:IndexFullScan_18",
          "  └─IndexFullScan_18 10000.00 cop[tikv] table:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "SQL": "select /*+ AGG_TO_COP() */ count(distinct c) from t group by c;",
        "Plan": [
          "StreamAgg_9 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->Column#5",
          "└─IndexReader_15 10000.00 root  index:IndexFullScan_16",
          "  └─IndexFullScan_16 10000.00 cop[tikv] table:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      }
    ]
  },
  {
    "Name": "TestSimplePlans",
    "Cases": [
      {
        "SQL": "select a from t limit 2",
        "Plan": [
          "Limit_7 2.00 root  offset:0, count:2",
          "└─TableReader_8 2.00 root  data:Limit_9",
          "  └─Limit_9 2.00 cop[tikv]  offset:0, count:2",
          "    └─TableFullScan_10 2.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "1",
          "2"
        ]
      },
      {
        "SQL": "select a from t limit 1 offset 2",
        "Plan": [
          "Limit_7 1.00 root  offset:2, count:1",
          "└─TableReader_8 3.00 root  data:Limit_9",
          "  └─Limit_9 3.00 cop[tikv]  offset:0, count:3",
          "    └─TableFullScan_10 3.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "SQL": "select b from t order by b limit 3",
        "Plan": [
          "TopN_9 3.00 root  test.t.b:asc, offset:0, count:3",
          "└─TableReader_11 3.00 root  data:TopN_12",
          "  └─TopN_12 3.00 cop[tikv]  test.t.b:asc, offset:0, count:3",
          "    └─TableFullScan_14 4.00 cop[tikv] table:t keep order:false"
        ],
        "Result": [
          "11",
          "22",
          "33"
        ]
      },
      {
        "SQL": "select a from t order by a limit 1 offset 2",
        "Plan": [
          "Limit_10 1.00 root  offset:2, count:1",
          "└─TableReader_16 3.00 root  data:Limit_17",
          "  └─Limit_17 3.00 cop[tikv]  offset:0, count:3",
          "    └─TableFullScan_15 3.00 cop[tikv] table:t pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "SQL": "select * from ((select a as aa from t t1) union all (select b as aa from t t2)) as t3 order by aa",
        "Plan": [
          "Sort_23 8.00 root  Column#5:asc",
          "└─Union_16 8.00 root  ",
          "  ├─Projection_17 4.00 root  test.t.a",
          "  │ └─TableReader_18 4.00 root  data:TableFullScan_19",
          "  │   └─TableFullScan_19 4.00 cop[tikv] table:t1 pk col:test.t.a, keep order:false",
          "  └─Projection_20 4.00 root  test.t.b",
          "    └─TableReader_21 4.00 root  data:TableFullScan_22",
          "      └─TableFullScan_22 4.00 cop[tikv] table:t2 keep order:false"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4",
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "SQL": "select a, b, lag(a,1) over (order by b) from t order by b",
        "Plan": [
          "Window_10 4.00 root  lag(test.t.a, 1)->Column#4 over(order by test.t.b asc)",
          "└─Sort_15 4.00 root  test.t.b:asc",
          "  └─TableReader_13 4.00 root  data:TableFullScan_14",
          "    └─TableFullScan_14 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "1 11 <nil>",
          "2 22 1",
          "3 33 2",
          "4 44 3"
        ]
      },
      {
        "SQL": "select * from (select a+1 as c, a+b as d from t) as t1 order by c+d limit 10",
        "Plan": [
          "Projection_22 4.00 root  plus(test.t.a, 1)->Column#3, plus(test.t.a, test.t.b)->Column#4",
          "└─Limit_24 4.00 root  offset:0, count:10",
          "  └─Sort_30 4.00 root  Column#5:asc",
          "    └─Projection_25 4.00 root  test.t.a, test.t.b, plus(plus(test.t.a, 1), plus(test.t.a, test.t.b))->Column#5",
          "      └─TableReader_26 4.00 root  data:TopN_27",
          "        └─TopN_27 4.00 cop[tikv]  plus(plus(test.t.a, 1), plus(test.t.a, test.t.b)):asc, offset:0, count:10",
          "          └─TableFullScan_28 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "2 12",
          "3 24",
          "4 36",
          "5 48"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t as t1 left join t as t2 on t1.a = t2.a and t1.b = 3 order by a",
        "Plan": [
          "TableReader_27 4.00 root  data:TableFullScan_28",
          "└─TableFullScan_28 4.00 cop[tikv] table:t1 pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexScan",
    "Cases": [
      {
        "SQL": "select b from t",
        "Plan": [
          "TableReader_9 3.00 root  data:TableFullScan_10",
          "└─TableFullScan_10 3.00 cop[tikv] table:t keep order:false"
        ],
        "Result": [
          "2",
          "5",
          "8"
        ]
      },
      {
        "SQL": "select a from t order by b",
        "Plan": [
          "Projection_11 3.00 root  test.t.a",
          "└─IndexReader_15 3.00 root  index:IndexFullScan_16",
          "  └─IndexFullScan_16 3.00 cop[tikv] table:t, index:idx_b(b) keep order:true"
        ],
        "Result": [
          "1",
          "4",
          "7"
        ]
      },
      {
        "SQL": "select c from t",
        "Plan": [
          "TableReader_7 3.00 root  data:TableFullScan_8",
          "└─TableFullScan_8 3.00 cop[tikv] table:t keep order:false"
        ],
        "Result": [
          "3",
          "6",
          "9"
        ]
      },
      {
        "SQL": "select a from t order by c",
        "Plan": [
          "Projection_9 3.00 root  test.t.a",
          "└─IndexReader_12 3.00 root  index:IndexFullScan_13",
          "  └─IndexFullScan_13 3.00 cop[tikv] table:t, index:idx_c_b(c, b) keep order:true"
        ],
        "Result": [
          "1",
          "4",
          "7"
        ]
      },
      {
        "SQL": "select a, b from t where b > 5 order by b",
        "Plan": [
          "IndexReader_19 1.00 root  index:IndexRangeScan_20",
          "└─IndexRangeScan_20 1.00 cop[tikv] table:t, index:idx_b(b) range:(5,+inf], keep order:true"
        ],
        "Result": [
          "7 8"
        ]
      },
      {
        "SQL": "select a, b, c from t where c = 3 and b > 1 order by b",
        "Plan": [
          "IndexReader_23 1.00 root  index:IndexRangeScan_24",
          "└─IndexRangeScan_24 1.00 cop[tikv] table:t, index:idx_c_b(c, b) range:(3 1,3 +inf], keep order:true"
        ],
        "Result": [
          "1 2 3"
        ]
      },
      {
        "SQL": "select a, b from t where c > 1 and b > 1 order by c",
        "Plan": [
          "Projection_22 3.00 root  test.t.a, test.t.b",
          "└─IndexReader_25 3.00 root  index:Selection_27",
          "  └─Selection_27 3.00 cop[tikv]  gt(test.t.b, 1)",
          "    └─IndexRangeScan_26 3.00 cop[tikv] table:t, index:idx_c_b(c, b) range:(1,+inf], keep order:true"
        ],
        "Result": [
          "1 2",
          "4 5",
          "7 8"
        ]
      }
    ]
  },
  {
    "Name": "TestJoin",
    "Cases": [
      {
        "SQL": "select t1.a, t1.b from t1, t2 where t1.a = t2.a and t1.a > 2",
        "Plan": [
          "Projection_16 2.00 root  test.t1.a, test.t1.b",
          "└─MergeJoin_19 2.00 root  inner join, left key:test.t1.a, right key:test.t2.a",
          "  ├─TableReader_35(Build) 2.00 root  data:TableRangeScan_36",
          "  │ └─TableRangeScan_36 2.00 cop[tikv] table:t2 pk col:test.t2.a, range:(2,+inf], keep order:true",
          "  └─TableReader_32(Probe) 2.00 root  data:TableRangeScan_33",
          "    └─TableRangeScan_33 2.00 cop[tikv] table:t1 pk col:test.t1.a, range:(2,+inf], keep order:true"
        ],
        "Result": [
          "3 33"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t1, t2 where t1.a > t2.a and t2.b > 200",
        "Plan": [
          "Projection_13 5.33 root  test.t1.a, test.t1.b",
          "└─HashJoin_15 5.33 root  CARTESIAN inner join, other cond:gt(test.t1.a, test.t2.a)",
          "  ├─TableReader_18(Build) 1.33 root  data:Selection_20",
          "  │ └─Selection_20 1.33 cop[tikv]  gt(test.t2.b, 200)",
          "  │   └─TableFullScan_19 4.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:false",
          "  └─TableReader_16(Probe) 4.00 root  data:TableFullScan_17",
          "    └─TableFullScan_17 4.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:false"
        ],
        "Result": [
          "3 33",
          "4 44",
          "4 44"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t1 left join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200",
        "Plan": [
          "Projection_17 1.60 root  test.t1.a, test.t1.b",
          "└─Selection_18 1.60 root  gt(test.t2.b, 200)",
          "  └─MergeJoin_21 2.00 root  left outer join, left key:test.t1.a, right key:test.t2.a",
          "    ├─TableReader_33(Build) 2.00 root  data:TableRangeScan_34",
          "    │ └─TableRangeScan_34 2.00 cop[tikv] table:t2 pk col:test.t2.a, range:(2,+inf], keep order:true",
          "    └─TableReader_30(Probe) 2.00 root  data:TableRangeScan_31",
          "      └─TableRangeScan_31 2.00 cop[tikv] table:t1 pk col:test.t1.a, range:(2,+inf], keep order:true"
        ],
        "Result": [
          "3 33"
        ]
      },
      {
        "SQL": "select t2.a, t2.b from t1 right join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200",
        "Plan": [
          "Projection_14 1.07 root  test.t2.a, test.t2.b",
          "└─Selection_15 1.07 root  gt(test.t1.a, 2)",
          "  └─MergeJoin_18 1.33 root  right outer join, left key:test.t1.a, right key:test.t2.a",
          "    ├─TableReader_27(Build) 4.00 root  data:TableFullScan_28",
          "    │ └─TableFullScan_28 4.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true",
          "    └─TableReader_30(Probe) 1.33 root  data:Selection_32",
          "      └─Selection_32 1.33 cop[tikv]  gt(test.t2.b, 200)",
          "        └─TableFullScan_31 4.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:true"
        ],
        "Result": [
          "3 333"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t1, t2 where t1.a = t2.a order by t1.a",
        "Plan": [
          "Projection_12 4.00 root  test.t1.a, test.t1.b",
          "└─MergeJoin_13 4.00 root  inner join, left key:test.t1.a, right key:test.t2.a",
          "  ├─TableReader_22(Build) 4.00 root  data:TableFullScan_23",
          "  │ └─TableFullScan_23 4.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:true",
          "  └─TableReader_17(Probe) 4.00 root  data:TableFullScan_18",
          "    └─TableFullScan_18 4.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      },
      {
        "SQL": "select * from t1 join t2 on t1.a = t2.a",
        "Plan": [
          "MergeJoin_11 4.00 root  inner join, left key:test.t1.a, right key:test.t2.a",
          "├─TableReader_25(Build) 4.00 root  data:TableFullScan_26",
          "│ └─TableFullScan_26 4.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:true",
          "└─TableReader_22(Probe) 4.00 root  data:TableFullScan_23",
          "  └─TableFullScan_23 4.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true"
        ],
        "Result": [
          "1 11 1 111",
          "2 22 2 222",
          "3 33 3 333"
        ]
      }
    ]
  },
  {
    "Name": "TestDoubleRead",
    "Cases": [
      {
        "SQL": "select a, b from t order by t.a",
        "Plan": [
          "Projection_15 10000.00 root  test.t.a, test.t.b",
          "└─IndexLookUp_14 10000.00 root  ",
          "  ├─IndexFullScan_16(Build) 10000.00 cop[tikv] table:t, index:a(a) keep order:true, stats:pseudo",
          "  └─TableFullScan_17(Probe) 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select a, b from t order by t.b",
        "Plan": [
          "Projection_17 10000.00 root  test.t.a, test.t.b",
          "└─IndexLookUp_16 10000.00 root  ",
          "  ├─IndexFullScan_18(Build) 10000.00 cop[tikv] table:t, index:b(b, c) keep order:true, stats:pseudo",
          "  └─TableFullScan_19(Probe) 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select a, b, c from t order by t.b, t.c",
        "Plan": [
          "Projection_22 10000.00 root  test.t.a, test.t.b, test.t.c",
          "└─IndexLookUp_21 10000.00 root  ",
          "  ├─IndexFullScan_23(Build) 10000.00 cop[tikv] table:t, index:b(b, c) keep order:true, stats:pseudo",
          "  └─TableFullScan_24(Probe) 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11 4",
          "2 22 3",
          "3 33 2",
          "4 44 1"
        ]
      },
      {
        "SQL": "select a, b, c from t order by t.c, t.b",
        "Plan": [
          "Projection_20 10000.00 root  test.t.a, test.t.b, test.t.c",
          "└─IndexLookUp_19 10000.00 root  ",
          "  ├─IndexFullScan_21(Build) 10000.00 cop[tikv] table:t, index:c(c, b) keep order:true, stats:pseudo",
          "  └─TableFullScan_22(Probe) 10000.00 cop[tikv] table:t pk col:test.t._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "4 44 1",
          "3 33 2",
          "2 22 3",
          "1 11 4"
        ]
      }
    ]
  },
  {
    "Name": "TestApply",
    "Cases": [
      {
        "SQL": "select a = (select a from t2 where t1.b = t2.b order by a limit 1) from t1",
        "Plan": [
          "Projection_23 4.00 root  eq(test.t1.a, test.t2.a)->Column#5",
          "└─Apply_25 4.00 root  CARTESIAN left outer join",
          "  ├─TableReader_26(Build) 4.00 root  data:TableFullScan_27",
          "  │ └─TableFullScan_27 4.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:false",
          "  └─Limit_29(Probe) 0.00 root  offset:0, count:1",
          "    └─TableReader_37 0.00 root  data:Limit_38",
          "      └─Limit_38 0.00 cop[tikv]  offset:0, count:1",
          "        └─Selection_36 0.00 cop[tikv]  eq(test.t1.b, test.t2.b)",
          "          └─TableFullScan_35 3.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:true"
        ],
        "Result": [
          "1",
          "1",
          "1",
          "<nil>"
        ]
      },
      {
        "SQL": "select sum(a), (select t1.a from t1 where t1.a = t2.a limit 1), (select t1.b from t1 where t1.b = t2.b limit 1) from t2",
        "Plan": [
          "Projection_32 1.00 root  Column#3, test.t1.a, test.t1.b",
          "└─Apply_34 1.00 root  CARTESIAN left outer join",
          "  ├─Apply_36(Build) 1.00 root  CARTESIAN left outer join",
          "  │ ├─StreamAgg_46(Build) 1.00 root  funcs:sum(Column#8)->Column#3, funcs:firstrow(Column#9)->test.t2.a, funcs:firstrow(Column#10)->test.t2.b",
          "  │ │ └─TableReader_47 1.00 root  data:StreamAgg_49",
          "  │ │   └─StreamAgg_49 1.00 cop[tikv]  funcs:sum(test.t2.a)->Column#8, funcs:firstrow(test.t2.a)->Column#9, funcs:firstrow(test.t2.b)->Column#10",
          "  │ │     └─TableFullScan_44 3.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:false",
          "  │ └─Limit_50(Probe) 1.00 root  offset:0, count:1",
          "  │   └─TableReader_51 1.00 root  data:Limit_52",
          "  │     └─Limit_52 1.00 cop[tikv]  offset:0, count:1",
          "  │       └─Selection_54 1.00 cop[tikv]  eq(test.t1.a, test.t2.a)",
          "  │         └─TableFullScan_53 4.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:false",
          "  └─Limit_55(Probe) 0.00 root  offset:0, count:1",
          "    └─TableReader_56 0.00 root  data:Limit_57",
          "      └─Limit_57 0.00 cop[tikv]  offset:0, count:1",
          "        └─Selection_59 0.00 cop[tikv]  eq(test.t1.b, test.t2.b)",
          "          └─TableFullScan_58 4.00 cop[tikv] table:t1 keep order:false"
        ],
        "Result": [
          "6 1 11"
        ]
      },
      {
        "SQL": "select a from t1 where exists(select 1 from t2 where t1.a = t2.a)",
        "Plan": [
          "MergeJoin_28 4.00 root  semi join, left key:test.t1.a, right key:test.t2.a",
          "├─TableReader_37(Build) 3.00 root  data:TableFullScan_38",
          "│ └─TableFullScan_38 3.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:true",
          "└─TableReader_34(Probe) 4.00 root  data:TableFullScan_35",
          "  └─TableFullScan_35 4.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true"
        ],
        "Result": [
          "1",
          "2",
          "3"
        ]
      }
    ]
  },
  {
    "Name": "TestMemTableScan",
    "Cases": [
      {
        "SQL": "select * from information_schema.processlist",
        "Plan": [
          "MemTableScan_3 10000.00 root table:PROCESSLIST "
        ],
        "Result": null
      }
    ]
  },
  {
    "Name": "TestTopN",
    "Cases": [
      {
        "SQL": "select a from (select a from t where b > 2 order by a limit 3 offset 1) as t1 order by a limit 2 offset 1",
        "Plan": [
          "Projection_23 1.33 root  test.t.a",
          "└─Limit_25 1.33 root  offset:2, count:2",
          "  └─TableReader_33 1.33 root  data:Limit_34",
          "    └─Limit_34 1.33 cop[tikv]  offset:0, count:4",
          "      └─Selection_32 1.33 cop[tikv]  gt(test.t.b, 2)",
          "        └─TableFullScan_31 4.00 cop[tikv] table:t pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "3",
          "4"
        ]
      },
      {
        "SQL": "select * from (select * from t order by a limit 3) as t1 order by a limit 5",
        "Plan": [
          "Limit_15 3.00 root  offset:0, count:3",
          "└─TableReader_21 3.00 root  data:Limit_22",
          "  └─Limit_22 3.00 cop[tikv]  offset:0, count:3",
          "    └─TableFullScan_20 3.00 cop[tikv] table:t pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      },
      {
        "SQL": "select b from (select b from t order by b limit 10 offset 10) as t1 order by b limit 10 offset 5",
        "Plan": [
          "Limit_15 4.00 root  offset:15, count:5",
          "└─Sort_23 4.00 root  test.t.b:asc",
          "  └─TableReader_16 4.00 root  data:TopN_17",
          "    └─TopN_17 4.00 cop[tikv]  test.t.b:asc, offset:0, count:20",
          "      └─TableFullScan_19 4.00 cop[tikv] table:t keep order:false"
        ],
        "Result": null
      },
      {
        "SQL": "select b from (select b from t order by b limit 10 offset 2) as t1 order by b limit 3 offset 5",
        "Plan": [
          "Limit_15 3.00 root  offset:7, count:3",
          "└─Sort_23 4.00 root  test.t.b:asc",
          "  └─TableReader_16 4.00 root  data:TopN_17",
          "    └─TopN_17 4.00 cop[tikv]  test.t.b:asc, offset:0, count:10",
          "      └─TableFullScan_19 4.00 cop[tikv] table:t keep order:false"
        ],
        "Result": null
      },
      {
        "SQL": "select a from (select a from t order by a limit 3 offset 5) as t1 order by a limit 3 offset 5",
        "Plan": [
          "TableDual_11 0.00 root  rows:0"
        ],
        "Result": null
      },
      {
        "SQL": "select a from (select a from t where b > 2 order by a, b limit 3 offset 1) as t1 order by a limit 2 offset 1",
        "Plan": [
          "Projection_23 1.33 root  test.t.a",
          "└─Limit_25 1.33 root  offset:2, count:2",
          "  └─Sort_34 1.33 root  test.t.a:asc, test.t.b:asc",
          "    └─TableReader_26 1.33 root  data:TopN_27",
          "      └─TopN_27 1.33 cop[tikv]  test.t.a:asc, test.t.b:asc, offset:0, count:4",
          "        └─Selection_30 1.33 cop[tikv]  gt(test.t.b, 2)",
          "          └─TableFullScan_29 4.00 cop[tikv] table:t pk col:test.t.a, keep order:false"
        ],
        "Result": [
          "3",
          "4"
        ]
      },
      {
        "SQL": "select * from (select * from t order by a limit 3) as t1 order by a, b limit 5",
        "Plan": [
          "Limit_14 3.00 root  offset:0, count:5",
          "└─Sort_26 3.00 root  test.t.a:asc, test.t.b:asc",
          "  └─Limit_16 3.00 root  offset:0, count:3",
          "    └─TableReader_22 3.00 root  data:Limit_23",
          "      └─Limit_23 3.00 cop[tikv]  offset:0, count:3",
          "        └─TableFullScan_21 3.00 cop[tikv] table:t pk col:test.t.a, keep order:true"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      }
    ]
  },
  {
    "Name": "TestCascadePlannerHashedPartTable",
    "Cases": [
      {
        "SQL": "select * from pt1",
        "Plan": [
          "TableReader_5 10000.00 root  data:TableFullScan_6",
          "└─TableFullScan_6 10000.00 cop[tikv] table:pt1 pk col:test.pt1._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": null
      }
    ]
  },
  {
    "Name": "TestInlineProjection",
    "Cases": [
      {
        "SQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1, t2 where t1.a = t2.a;",
        "Plan": [
          "Projection_40 12487.50 root  test.t1.b, test.t2.b",
          "└─HashJoin_41 12487.50 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "  ├─TableReader_43(Build) 9990.00 root  data:Selection_45",
          "  │ └─Selection_45 9990.00 cop[tikv]  not(isnull(test.t1.a))",
          "  │   └─TableFullScan_44 10000.00 cop[tikv] table:t1 pk col:test.t1._tidb_rowid, keep order:false, stats:pseudo",
          "  └─TableReader_50(Probe) 9990.00 root  data:Selection_52",
          "    └─Selection_52 9990.00 cop[tikv]  not(isnull(test.t2.a))",
          "      └─TableFullScan_51 10000.00 cop[tikv] table:t2 pk col:test.t2._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "SQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_21 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─TableReader_23(Build) 10000.00 root  data:TableFullScan_24",
          "│ └─TableFullScan_24 10000.00 cop[tikv] table:t1 pk col:test.t1._tidb_rowid, keep order:false, stats:pseudo",
          "└─TableReader_29(Probe) 10000.00 root  data:TableFullScan_30",
          "  └─TableFullScan_30 10000.00 cop[tikv] table:t2 pk col:test.t2._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "SQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 left outer join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_22 12500.00 root  left outer join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─TableReader_29(Build) 10000.00 root  data:TableFullScan_30",
          "│ └─TableFullScan_30 10000.00 cop[tikv] table:t2 pk col:test.t2._tidb_rowid, keep order:false, stats:pseudo",
          "└─TableReader_23(Probe) 10000.00 root  data:TableFullScan_24",
          "  └─TableFullScan_24 10000.00 cop[tikv] table:t1 pk col:test.t1._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1",
          "2 <nil>"
        ]
      },
      {
        "SQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 right outer join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_21 12500.00 root  right outer join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─TableReader_23(Build) 10000.00 root  data:TableFullScan_24",
          "│ └─TableFullScan_24 10000.00 cop[tikv] table:t1 pk col:test.t1._tidb_rowid, keep order:false, stats:pseudo",
          "└─TableReader_29(Probe) 10000.00 root  data:TableFullScan_30",
          "  └─TableFullScan_30 10000.00 cop[tikv] table:t2 pk col:test.t2._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1",
          "<nil> 3"
        ]
      },
      {
        "SQL": "select 1 from (select /*+ HASH_JOIN(t1) */ t1.a in (select t2.a from t2) from t1) x;",
        "Plan": [
          "Projection_17 10000.00 root  1->Column#8",
          "└─HashJoin_18 10000.00 root  CARTESIAN left outer semi join, other cond:eq(test.t1.a, test.t2.a)",
          "  ├─IndexReader_25(Build) 10000.00 root  index:IndexFullScan_26",
          "  │ └─IndexFullScan_26 10000.00 cop[tikv] table:t2, index:idx_a(a) keep order:false, stats:pseudo",
          "  └─IndexReader_21(Probe) 10000.00 root  index:IndexFullScan_22",
          "    └─IndexFullScan_22 10000.00 cop[tikv] table:t1, index:idx_a(a) keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "1"
        ]
      },
      {
        "SQL": "select 1 from (select /*+ HASH_JOIN(t1) */ t1.a not in (select t2.a from t2) from t1) x;",
        "Plan": [
          "Projection_17 10000.00 root  1->Column#8",
          "└─HashJoin_18 10000.00 root  CARTESIAN anti left outer semi join, other cond:eq(test.t1.a, test.t2.a)",
          "  ├─IndexReader_25(Build) 10000.00 root  index:IndexFullScan_26",
          "  │ └─IndexFullScan_26 10000.00 cop[tikv] table:t2, index:idx_a(a) keep order:false, stats:pseudo",
          "  └─IndexReader_21(Probe) 10000.00 root  index:IndexFullScan_22",
          "    └─IndexFullScan_22 10000.00 cop[tikv] table:t1, index:idx_a(a) keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "1"
        ]
      },
      {
        "SQL": "select /*+ INL_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_21 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─TableReader_23(Build) 10000.00 root  data:TableFullScan_24",
          "│ └─TableFullScan_24 10000.00 cop[tikv] table:t1 pk col:test.t1._tidb_rowid, keep order:false, stats:pseudo",
          "└─TableReader_29(Probe) 10000.00 root  data:TableFullScan_30",
          "  └─TableFullScan_30 10000.00 cop[tikv] table:t2 pk col:test.t2._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "SQL": "select /*+ INL_HASH_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_21 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─TableReader_23(Build) 10000.00 root  data:TableFullScan_24",
          "│ └─TableFullScan_24 10000.00 cop[tikv] table:t1 pk col:test.t1._tidb_rowid, keep order:false, stats:pseudo",
          "└─TableReader_29(Probe) 10000.00 root  data:TableFullScan_30",
          "  └─TableFullScan_30 10000.00 cop[tikv] table:t2 pk col:test.t2._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "SQL": "select /*+ INL_MERGE_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_21 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─TableReader_23(Build) 10000.00 root  data:TableFullScan_24",
          "│ └─TableFullScan_24 10000.00 cop[tikv] table:t1 pk col:test.t1._tidb_rowid, keep order:false, stats:pseudo",
          "└─TableReader_29(Probe) 10000.00 root  data:TableFullScan_30",
          "  └─TableFullScan_30 10000.00 cop[tikv] table:t2 pk col:test.t2._tidb_rowid, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      }
    ]
  },
  {
    "Name": "TestTiKVSelectionStats",
    "Cases": [
      {
        "SQL": "select * from t where pk > 2 and b < 5",
        "Plan": [
          "TableReader_12 1.99 root  data:Selection_14",
          "└─Selection_14 1.99 cop[tikv]  lt(test.t.b, 5)",
          "  └─TableRangeScan_13 6.00 cop[tikv] table:t pk col:test.t.pk, range:(2,+inf], keep order:false"
        ],
        "Result": [
          "3 0 3",
          "4 0 4"
        ]
      },
      {
        "SQL": "select * from t where pk > 2 and b < 5 limit 1",
        "Plan": [
          "Limit_20 1.00 root  offset:0, count:1",
          "└─TableReader_21 1.00 root  data:Limit_22",
          "  └─Limit_22 1.00 cop[tikv]  offset:0, count:1",
          "    └─Selection_24 1.00 cop[tikv]  lt(test.t.b, 5)",
          "      └─TableRangeScan_23 3.01 cop[tikv] table:t pk col:test.t.pk, range:(2,+inf], keep order:false"
        ],
        "Result": [
          "3 0 3"
        ]
      },
      {
        "SQL": "select a, b from t where a = 0 and b < 2",
        "Plan": [
          "IndexReader_15 1.66 root  index:IndexRangeScan_16",
          "└─IndexRangeScan_16 1.66 cop[tikv] table:t, index:idx_a_b(a, b) range:[0 -inf,0 2), keep order:false"
        ],
        "Result": [
          "0 0",
          "0 1"
        ]
      },
      {
        "SQL": "select a, b from t where a < 1 and b < 2",
        "Plan": [
          "IndexReader_15 1.66 root  index:Selection_17",
          "└─Selection_17 1.66 cop[tikv]  lt(test.t.b, 2)",
          "  └─IndexRangeScan_16 5.00 cop[tikv] table:t, index:idx_a_b(a, b) range:[-inf,1), keep order:false"
        ],
        "Result": [
          "0 0",
          "0 1"
        ]
      },
      {
        "SQL": "select a, b from t where a < 1 and b < 2 limit 1",
        "Plan": [
          "Limit_15 1.00 root  offset:0, count:1",
          "└─IndexReader_16 1.00 root  index:Limit_17",
          "  └─Limit_17 1.00 cop[tikv]  offset:0, count:1",
          "    └─Selection_19 1.00 cop[tikv]  lt(test.t.b, 2)",
          "      └─IndexRangeScan_18 3.01 cop[tikv] table:t, index:idx_a_b(a, b) range:[-inf,1), keep order:false"
        ],
        "Result": [
          "0 0"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexJoin",
    "Cases": [
      {
        "SQL": "select * from t1 left join t2 on t1.b = t2.a order by t1.a",
        "Plan": [
          "IndexJoin_13 12500.00 root  left outer join, inner:TableReader_12, outer key:test.t1.b, inner key:test.t2.a",
          "├─TableReader_14(Build) 10000.00 root  data:TableFullScan_15",
          "│ └─TableFullScan_15 10000.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true, stats:pseudo",
          "└─TableReader_12(Probe) 1.00 root  data:TableRangeScan_11",
          "  └─TableRangeScan_11 1.00 cop[tikv] table:t2 , range: decided by [test.t1.b]keep order:false, stats:pseudo"
        ],
        "Result": [
          "0 0 0 111",
          "1 0 0 111",
          "2 0 0 111",
          "3 0 0 111"
        ]
      },
      {
        "SQL": "select * from t1 left join t2 on t1.b = t2.a and t1.b = t2.b and t1.a > 10 order by t1.a",
        "Plan": [
          "IndexJoin_13 12500.00 root  left outer join, inner:TableReader_12, outer key:test.t1.b, inner key:test.t2.a, left cond:gt(test.t1.a, 10), other cond:eq(test.t1.b, test.t2.b)",
          "├─TableReader_14(Build) 10000.00 root  data:TableFullScan_15",
          "│ └─TableFullScan_15 10000.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true, stats:pseudo",
          "└─TableReader_12(Probe) 1.00 root  data:TableRangeScan_11",
          "  └─TableRangeScan_11 1.00 cop[tikv] table:t2 , range: decided by [test.t1.b test.t1.b]keep order:false, stats:pseudo"
        ],
        "Result": [
          "0 0 <nil> <nil>",
          "1 0 <nil> <nil>",
          "2 0 <nil> <nil>",
          "3 0 <nil> <nil>"
        ]
      },
      {
        "SQL": "select * from t1 left join (select * from t2 where t2.a > 0 and t2.b > 0) as t3 on t1.b = t3.a order by t1.a",
        "Plan": [
          "IndexJoin_18 10000.00 root  left outer join, inner:TableReader_17, outer key:test.t1.b, inner key:test.t2.a",
          "├─TableReader_19(Build) 10000.00 root  data:TableFullScan_20",
          "│ └─TableFullScan_20 10000.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true, stats:pseudo",
          "└─TableReader_17(Probe) 0.14 root  data:Selection_16",
          "  └─Selection_16 0.14 cop[tikv]  gt(test.t2.a, 0)",
          "    └─TableRangeScan_15 0.42 cop[tikv] table:t2 , range: decided by [test.t1.b]keep order:false, stats:pseudo"
        ],
        "Result": [
          "0 0 <nil> <nil>",
          "1 0 <nil> <nil>",
          "2 0 <nil> <nil>",
          "3 0 <nil> <nil>"
        ]
      }
    ]
  },
  {
    "Name": "TestDecorrelate",
    "Cases": [
      {
        "SQL": "select t1.a, (select sum(t2.b) from t2 where t1.a = t2.a) from t1 order by t1.a",
        "Plan": [
          "StreamAgg_25 8000.00 root  group by:test.t1.a, funcs:firstrow(test.t1.a)->test.t1.a, funcs:sum(Column#6)->Column#5",
          "└─Projection_26 10000.00 root  test.t1.a, cast(test.t2.b, decimal(65,0) BINARY)->Column#6, test.t1.a",
          "  └─MergeJoin_37 10000.00 root  left outer join, left key:test.t1.a, right key:test.t2.a",
          "    ├─TableReader_41(Build) 10000.00 root  data:TableFullScan_42",
          "    │ └─TableFullScan_42 10000.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:true, stats:pseudo",
          "    └─TableReader_29(Probe) 10000.00 root  data:TableFullScan_30",
          "      └─TableFullScan_30 10000.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 <nil>"
        ]
      },
      {
        "SQL": "select t1.a, (select count(1) from t2 where t1.a = t2.a) from t1 order by t1.a",
        "Plan": [
          "Apply_20 10000.00 root  CARTESIAN left outer join",
          "├─TableReader_21(Build) 10000.00 root  data:TableFullScan_22",
          "│ └─TableFullScan_22 10000.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true, stats:pseudo",
          "└─StreamAgg_35(Probe) 1.00 root  funcs:count(Column#6)->Column#5",
          "  └─TableReader_36 1.00 root  data:StreamAgg_38",
          "    └─StreamAgg_38 1.00 cop[tikv]  funcs:count(1)->Column#6",
          "      └─Selection_33 10.00 cop[tikv]  eq(test.t1.a, test.t2.a)",
          "        └─TableFullScan_32 10000.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1",
          "2 1",
          "3 1",
          "4 0"
        ]
      },
      {
        "SQL": "select t1.a, (select t2.b from t2 where t2.a < t1.a order by t2.b limit 1) from t1 order by t1.a",
        "Plan": [
          "Projection_25 10000.00 root  test.t1.a, test.t2.b",
          "└─Apply_27 10000.00 root  CARTESIAN left outer join",
          "  ├─TableReader_28(Build) 10000.00 root  data:TableFullScan_29",
          "  │ └─TableFullScan_29 10000.00 cop[tikv] table:t1 pk col:test.t1.a, keep order:true, stats:pseudo",
          "  └─TopN_33(Probe) 1.00 root  test.t2.b:asc, offset:0, count:1",
          "    └─TableReader_35 1.00 root  data:TopN_36",
          "      └─TopN_36 1.00 cop[tikv]  test.t2.b:asc, offset:0, count:1",
          "        └─Selection_39 8000.00 cop[tikv]  lt(test.t2.a, test.t1.a)",
          "          └─TableFullScan_38 10000.00 cop[tikv] table:t2 pk col:test.t2.a, keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 <nil>",
          "2 11",
          "3 11",
          "4 11"
        ]
      }
    ]
  }
]
